---
description:
globs:
alwaysApply: true
---

# 開発ルール

## タスクの進め方

- 1. 作業開始時に、`ai-works/plans` ディレクトリに `yyyy-mm-dd-<work name>_plan.md` を作成し、設計方針、完了要件をまとめてください
- 2. 1のドキュメントに関してのTODOタスク一覧を `ai-works/todos` ディレクトリに `yyyy-mm-dd-<work name>_todo.md` を作成してください。
- 3. TODOに従って、作業を実行し、1つのTODOを完了させたら、必ずドキュメントを更新してください

## 中断からの再開
- 作業のコンテキストが足りない場合は、`yyyy-mm-dd-<work name>_plan.md`, `yyyy-mm-dd-<work name>_todo.md` を一度読み込み作業を再開してください
- どのドキュメントを読めばよいか分からない場合は、作業を一度中断し、指示を仰いでください

## タスク完了時
- rust コードに修正がある場合は、`cargo fmt`, `cargo clippy` を実行してください
  - `cargo clippy` は warning でも 修正してください
- 修正内容が、 @README.md @docs/ の内容と乖離がある場合は、ドキュメントの更新を行ってください
- `yyyy-mm-dd-<work name>_plan.md` の内容と実装に乖離がないか確認してください
- `yyyy-mm-dd-<work name>_todo.md` のタスクが全て完了しているか確認し、更新してください
- ルールに従って、PR を作成
  - デフォルトブランチは `main`
  - 作業開始時に、必ずデフォルトブランチからブランチを分けて作業すること
  - 作業完了後は、gh コマンドで PR を作成すること

## テスト要件

- **必須**: 各モジュールは Rust 標準テストフレームワークでテストを作成すること
- **カバレッジ**: 主要な機能とエラーパスのテストを含めること
- **作業完了**: 作業終了時は必ずテストが通ることを確認すること

## テスト実行例

```bash
# 全テスト実行
cargo test

# 特定のテストモジュール実行
cargo test config
cargo test agents::cursor

# テストカバレッジ（tarpaulin要インストール）
cargo install cargo-tarpaulin
cargo tarpaulin --out html

# 統合テスト実行
cargo test --test integration_test
```
